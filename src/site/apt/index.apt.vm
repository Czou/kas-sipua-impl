
Kurento Android SIP User Agent

* Introduction

	This project is an Android implementation of interface {{{../../kas-sipua/${kasSipUaVersion}KAS-SIPUA}}.
	Provides an embeddable library enabling SIP call management for Android applications.
	
* Quick start
	
	* UaFactory is used to create User Agents. It has a static method <<getInstance(SipConfig)>>>
	that creates an	<<<UA>>> object for the given configuration. Multiple UAs can be created as far as ports
	don't collide.
	
	* A <<<MediaSession>>> instance must be provided to UaFactory before any User Agent is created.
	Media information is required by the SIP stack to carry out SDP negotiation according to
	media capabilities.
	
+---------------------
	UaFactory.setMediaSession(MediaSessionIntance);
+--------------------- 

	* <<<SipConfig>>> is used to provide <<<UaFactory>>> required configuration details to create
	 <<<UA>>> objects. It contains following attributes:
		
		*	<<<LocalAddress>>>: This is the local address where the SipStack will listen messages.
		
		*	<<<LocalPort>>>: This is the local port where the SipStack will bind to.
		
		*   <<<ProxyAddress>>>: This is the remote SIP Proxy and Registrar address.
		
		*	<<<ProxyPort>>>: This is the UDP port where the remote SIP Proxy listens messages
		
		*	<<<StunAddress>>>: This is the stun address
		
		*	<<<StunPort>>>: This is the stun port
	
+---------------------
		SipConfig config = new SipConfig();
		config.setProxyAddress("127.0.0.1");
		config.setProxyPort("5070");
		config.setLocalAddress("127.0.0.1");
		config.setLocalPort("5060");
		config.setStunAddress("stun.xten.com");
		config.setStunPort(3478);
		
		UaFactory.getInstance(config);
+---------------------

	* <<Stun Server>> is used to know the type of NAT. Some NAT are not supported with stun server, 
	only the NATs type cone are compatible. When there are problems with the stun, we have an exception 
	with the message of the problem. If <<<StunAddress>>> is empty and <<<StunPort>>> is 0, the stun 
	server is disactivated.  


* Structure for SipDialogs: Transactions

	Kas-sipua-impl is structure on two kind of transaction for manage sip messages. They  are divided in two group CTransactions for
	outgoing request and STransaction for incoming request.

*-------------*--------------*	
| <<CTransactions>>| <<STransactions>> 
*-------------*--------------*
|CRegister    |SRegister
*-------------*--------------*
|CInvite      | Sinvite
*-------------*--------------*
|CBye         | SBye
*-------------*--------------*
|CCancel      | SCancel
*-------------*--------------*
|COptions     |---
*-------------*--------------*
|---          |SAck
*-------------*--------------*

	Note: Opensips must be configure for pass test see {{{./testhelp.html}test-help}}.
		
		